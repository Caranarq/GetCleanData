stats
require(stats)
stats
library(stats)
stats
ls()
rm(list=ls())
ls()
quit()
mynames <- c("bob", "mary", "tom")
description <- my names
description <- my_names
description <- mynames
description <- gsub("o", " the letter o ", description)
description
description <- gsub("m", " the letter m ", description)
codestart <- paste(mynames, description)
codestart
rm(list = ls())
run_analysis <- function(directory) {
setwd(directory)
# RETRIEVE DATASET
message("1. Retrieving raw dataset ...")
if(!dir.exists("UCI HAR Dataset")) {
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","Dataset.zip", mode="wb")
unzip("Dataset.zip")
} else {
message("   Message: dataset existed from a previous session, using existing dataset...")
}
# IMPORT TEST AND TRAIN FILES INTO R ENVIRONMENT
message("2. Importing files into R environment ... ")
allfiles <- dir(full.names = T, recursive = T)
alldirs <- list.dirs()
# test files
testsubj <- read.table(allfiles[16])
testset <- read.table(allfiles[17])
testlabels <- read.table(allfiles[18])
# train files
trainsubj <- read.table(allfiles[28])
trainset <- read.table(allfiles[29])
trainlabels <- read.table(allfiles[30])
# descriptions
labels <- read.table(allfiles[2])
labels <- labels[, 2]
labels <- as.character(labels)
features <- read.table(allfiles[3])
features <- as.character(features[, 2])
# REQ5 : Appropriately label the data set with descriptive variable names
message("3. Labeling dataset with descriptive variable names ... ")
names(trainset)[1:length(features)] <- features
names(testset)[1:length(features)] <- features
# REQ2 : Extract mean and std. dev. measurements
message("4. Extracting mean and standard deviation measurements ... ")
meancol <- features[grep("Mean", features, ignore.case = T)]
stdcol <- features[grep("std", features, ignore.case = T)]
quedata <- c(meancol, stdcol)
testdata <- testset[, quedata]
traindata <- trainset[, quedata]
# REQ3 : Use descriptive activity names
message("5. Labeling activity names ... ")
trainact <- trainlabels
testact <- testlabels
qrep <- function(x, values) {
dfx <- as.data.frame(x)
charvals <- as.character(values)
for(i in 1:length(values)) {
matchvector <- which(dfx==i)
dfx[matchvector, ] <- charvals[i]
}
dfx
}
trainnames <- qrep(trainact, labels)
testnames <- qrep(testact, labels)
traindata$activity <- trainnames[, 1]
testdata$activity <- testnames[, 1]
# REQ1 : Merge the TRAINING and TEST sets
message("6. Merging TRAINING and TEST sets ... ")
traindata$subject <- trainsubj[, 1]
testdata$subject <- testsubj[, 1]
alldata <- rbind(traindata, testdata)
alldata <- alldata[, c(88, 87, 1:86)] #reorder for human reading
DS_act_meanstd <<- alldata
message("7. DATASET 1 CREATED:")
message("  'DS_act_meanstd' dataset was created in the parent environment.")
message("   ")
#REQ5 : create an independent data set with the average of each
#variable for each activity and each subject.
# calculate the requested averages
message("8. Spliting data by activity and subject ... ")
actsubj <- paste(alldata$subject, alldata$activity)
alldata$actsubj <- actsubj
alldata <- alldata[, c(89, 1:88)] # strip character columns
numdata <- alldata[, 4:89]
numlist <- split(numdata, actsubj)
message("9. Calculating means ... ")
meanlist <- lapply(numlist, colMeans)
finaldf <- do.call("rbind", meanlist)
finaldf <- as.data.frame(finaldf)
# return stripped character columns
factors <- alldata[as.numeric(rownames(unique(as.data.frame(actsubj)))), 2:3]
factors <- factors[order(unique(actsubj)), ]
# complete the tidy dataset
tidymeans <- cbind(factors, finaldf)
row.names(tidymeans) <- 1:180
DS_tidymeans <<- tidymeans
message("10. DATASET 2 CREATED:")
message("   'DS_tidymeans' dataset was created in the parent environment.")
message("   ")
message("***OPERATION COMPLETE***
2 datasets created:
'DS_act_meanstd'
'DS_tidymeans'")
}
run_analysis()
run_analysis <- function(directory = getwd()) {
setwd(directory)
# RETRIEVE DATASET
message("1. Retrieving raw dataset ...")
if(!dir.exists("UCI HAR Dataset")) {
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","Dataset.zip", mode="wb")
unzip("Dataset.zip")
} else {
message("   Message: dataset existed from a previous session, using existing dataset...")
}
# IMPORT TEST AND TRAIN FILES INTO R ENVIRONMENT
message("2. Importing files into R environment ... ")
allfiles <- dir(full.names = T, recursive = T)
alldirs <- list.dirs()
# test files
testsubj <- read.table(allfiles[16])
testset <- read.table(allfiles[17])
testlabels <- read.table(allfiles[18])
# train files
trainsubj <- read.table(allfiles[28])
trainset <- read.table(allfiles[29])
trainlabels <- read.table(allfiles[30])
# descriptions
labels <- read.table(allfiles[2])
labels <- labels[, 2]
labels <- as.character(labels)
features <- read.table(allfiles[3])
features <- as.character(features[, 2])
# REQ5 : Appropriately label the data set with descriptive variable names
message("3. Labeling dataset with descriptive variable names ... ")
names(trainset)[1:length(features)] <- features
names(testset)[1:length(features)] <- features
# REQ2 : Extract mean and std. dev. measurements
message("4. Extracting mean and standard deviation measurements ... ")
meancol <- features[grep("Mean", features, ignore.case = T)]
stdcol <- features[grep("std", features, ignore.case = T)]
quedata <- c(meancol, stdcol)
testdata <- testset[, quedata]
traindata <- trainset[, quedata]
# REQ3 : Use descriptive activity names
message("5. Labeling activity names ... ")
trainact <- trainlabels
testact <- testlabels
qrep <- function(x, values) {
dfx <- as.data.frame(x)
charvals <- as.character(values)
for(i in 1:length(values)) {
matchvector <- which(dfx==i)
dfx[matchvector, ] <- charvals[i]
}
dfx
}
trainnames <- qrep(trainact, labels)
testnames <- qrep(testact, labels)
traindata$activity <- trainnames[, 1]
testdata$activity <- testnames[, 1]
# REQ1 : Merge the TRAINING and TEST sets
message("6. Merging TRAINING and TEST sets ... ")
traindata$subject <- trainsubj[, 1]
testdata$subject <- testsubj[, 1]
alldata <- rbind(traindata, testdata)
alldata <- alldata[, c(88, 87, 1:86)] #reorder for human reading
DS_act_meanstd <<- alldata
message("7. DATASET 1 CREATED:")
message("  'DS_act_meanstd' dataset was created in the parent environment.")
message("   ")
#REQ5 : create an independent data set with the average of each
#variable for each activity and each subject.
# calculate the requested averages
message("8. Spliting data by activity and subject ... ")
actsubj <- paste(alldata$subject, alldata$activity)
alldata$actsubj <- actsubj
alldata <- alldata[, c(89, 1:88)] # strip character columns
numdata <- alldata[, 4:89]
numlist <- split(numdata, actsubj)
message("9. Calculating means ... ")
meanlist <- lapply(numlist, colMeans)
finaldf <- do.call("rbind", meanlist)
finaldf <- as.data.frame(finaldf)
# return stripped character columns
factors <- alldata[as.numeric(rownames(unique(as.data.frame(actsubj)))), 2:3]
factors <- factors[order(unique(actsubj)), ]
# complete the tidy dataset
tidymeans <- cbind(factors, finaldf)
row.names(tidymeans) <- 1:180
DS_tidymeans <<- tidymeans
message("10. DATASET 2 CREATED:")
message("   'DS_tidymeans' dataset was created in the parent environment.")
message("   ")
message("***OPERATION COMPLETE***
2 datasets created:
'DS_act_meanstd'
'DS_tidymeans'")
}
run_analysis()
setwd("F:/Shared/Learning/DataScience/03 Getting and clening Data/CapstoneProject")
run_analysis()
allfiles <- dir(full.names = T, recursive = T)
allfiles
run_analysis()
allfiles <- dir(full.names = T, recursive = T)
allfiles
allfiles
read.table(allfiles["./UCI HAR Dataset/test/subject_test.txt"])
read.table(allfiles[["./UCI HAR Dataset/test/subject_test.txt"]])
allfiles$1
allfiles$2
allfiles$./UCI HAR Dataset/test/subject_test.txt
allfiles
head(read.table("./UCI HAR Dataset/test/subject_test.txt"))
colnames(DS_tidymeans)
colnames(DS_act_meanstd)
run_analysis <- function(directory = getwd()) {
setwd(directory)
# RETRIEVE DATASET
message("1. Retrieving raw dataset ...")
if(!dir.exists("UCI HAR Dataset")) {
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","Dataset.zip", mode="wb")
unzip("Dataset.zip")
} else {
message("   Message: dataset existed from a previous session, using existing dataset...")
}
# IMPORT TEST AND TRAIN FILES INTO R ENVIRONMENT
message("2. Importing files into R environment ... ")
allfiles <- dir(full.names = T, recursive = T)
alldirs <- list.dirs()
# test files
testsubj <- read.table("./UCI HAR Dataset/test/subject_test.txt")
testset <- read.table("./UCI HAR Dataset/test/X_test.txt")
testlabels <- read.table("./UCI HAR Dataset/test/y_test.txt")
# train files
trainsubj <- read.table("./UCI HAR Dataset/train/subject_train.txt")
trainset <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainlabels <- read.table("./UCI HAR Dataset/train/y_train.txt")
# descriptions
labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
labels <- labels[, 2]
labels <- as.character(labels)
features <- read.table("./UCI HAR Dataset/features.txt")
features <- as.character(features[, 2])
# REQ5 : Appropriately label the data set with descriptive variable names
message("3. Labeling dataset with descriptive variable names ... ")
names(trainset)[1:length(features)] <- features
names(testset)[1:length(features)] <- features
# REQ2 : Extract mean and std. dev. measurements
message("4. Extracting mean and standard deviation measurements ... ")
meancol <- features[grep("Mean", features, ignore.case = T)]
stdcol <- features[grep("std", features, ignore.case = T)]
quedata <- c(meancol, stdcol)
testdata <- testset[, quedata]
traindata <- trainset[, quedata]
# REQ3 : Use descriptive activity names
message("5. Labeling activity names ... ")
trainact <- trainlabels
testact <- testlabels
qrep <- function(x, values) {
dfx <- as.data.frame(x)
charvals <- as.character(values)
for(i in 1:length(values)) {
matchvector <- which(dfx==i)
dfx[matchvector, ] <- charvals[i]
}
dfx
}
trainnames <- qrep(trainact, labels)
testnames <- qrep(testact, labels)
traindata$activity <- trainnames[, 1]
testdata$activity <- testnames[, 1]
# REQ1 : Merge the TRAINING and TEST sets
message("6. Merging TRAINING and TEST sets ... ")
traindata$subject <- trainsubj[, 1]
testdata$subject <- testsubj[, 1]
alldata <- rbind(traindata, testdata)
alldata <- alldata[, c(88, 87, 1:86)] #reorder for human reading
DS_act_meanstd <<- alldata
message("7. DATASET 1 CREATED:")
message("  'DS_act_meanstd' dataset was created in the parent environment.")
message("   ")
#REQ5 : create an independent data set with the average of each
#variable for each activity and each subject.
# calculate the requested averages
message("8. Spliting data by activity and subject ... ")
actsubj <- paste(alldata$subject, alldata$activity)
alldata$actsubj <- actsubj
alldata <- alldata[, c(89, 1:88)] # strip character columns
numdata <- alldata[, 4:89]
numlist <- split(numdata, actsubj)
message("9. Calculating means ... ")
meanlist <- lapply(numlist, colMeans)
finaldf <- do.call("rbind", meanlist)
finaldf <- as.data.frame(finaldf)
# return stripped character columns
factors <- alldata[as.numeric(rownames(unique(as.data.frame(actsubj)))), 2:3]
factors <- factors[order(unique(actsubj)), ]
# complete the tidy dataset
tidymeans <- cbind(factors, finaldf)
row.names(tidymeans) <- 1:180
DS_tidymeans <<- tidymeans
message("10. DATASET 2 CREATED:")
message("   'DS_tidymeans' dataset was created in the parent environment.")
message("   ")
message("***OPERATION COMPLETE***
2 datasets created:
'DS_act_meanstd'
'DS_tidymeans'")
}
run_analysis()
colnames(DS_tidymeans)
rm(list = ls())
run_analysis()
run_analysis <- function(directory = getwd()) {
setwd(directory)
# RETRIEVE DATASET
message("1. Retrieving raw dataset ...")
if(!dir.exists("UCI HAR Dataset")) {
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","Dataset.zip", mode="wb")
unzip("Dataset.zip")
} else {
message("   Message: dataset existed from a previous session, using existing dataset...")
}
# IMPORT TEST AND TRAIN FILES INTO R ENVIRONMENT
message("2. Importing files into R environment ... ")
# test files
testsubj <- read.table("./UCI HAR Dataset/test/subject_test.txt")
testset <- read.table("./UCI HAR Dataset/test/X_test.txt")
testlabels <- read.table("./UCI HAR Dataset/test/y_test.txt")
# train files
trainsubj <- read.table("./UCI HAR Dataset/train/subject_train.txt")
trainset <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainlabels <- read.table("./UCI HAR Dataset/train/y_train.txt")
# descriptions
labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
labels <- labels[, 2]
labels <- as.character(labels)
features <- read.table("./UCI HAR Dataset/features.txt")
features <- as.character(features[, 2])
# REQ5 : Appropriately label the data set with descriptive variable names
message("3. Labeling dataset with descriptive variable names ... ")
names(trainset)[1:length(features)] <- features
names(testset)[1:length(features)] <- features
# REQ2 : Extract mean and std. dev. measurements
message("4. Extracting mean and standard deviation measurements ... ")
meancol <- features[grep("Mean", features, ignore.case = T)]
stdcol <- features[grep("std", features, ignore.case = T)]
quedata <- c(meancol, stdcol)
testdata <- testset[, quedata]
traindata <- trainset[, quedata]
# REQ3 : Use descriptive activity names
message("5. Labeling activity names ... ")
trainact <- trainlabels
testact <- testlabels
qrep <- function(x, values) {
dfx <- as.data.frame(x)
charvals <- as.character(values)
for(i in 1:length(values)) {
matchvector <- which(dfx==i)
dfx[matchvector, ] <- charvals[i]
}
dfx
}
trainnames <- qrep(trainact, labels)
testnames <- qrep(testact, labels)
traindata$activity <- trainnames[, 1]
testdata$activity <- testnames[, 1]
# REQ1 : Merge the TRAINING and TEST sets
message("6. Merging TRAINING and TEST sets ... ")
traindata$subject <- trainsubj[, 1]
testdata$subject <- testsubj[, 1]
alldata <- rbind(traindata, testdata)
alldata <- alldata[, c(88, 87, 1:86)] #reorder for human reading
DS_all_meanstd <<- alldata
message("7. DATASET 1 CREATED:")
message("  'DS_all_meanstd' dataset was created in the parent environment.")
message("   ")
#REQ5 : create an independent data set with the average of each
#variable for each activity and each subject.
# calculate the requested averages
message("8. Spliting data by activity and subject ... ")
actsubj <- paste(alldata$subject, alldata$activity)
alldata$actsubj <- actsubj
alldata <- alldata[, c(89, 1:88)] # strip character columns
numdata <- alldata[, 4:89]
numlist <- split(numdata, actsubj)
message("9. Calculating means ... ")
meanlist <- lapply(numlist, colMeans)
finaldf <- do.call("rbind", meanlist)
finaldf <- as.data.frame(finaldf)
# return stripped character columns
factors <- alldata[as.numeric(rownames(unique(as.data.frame(actsubj)))), 2:3]
factors <- factors[order(unique(actsubj)), ]
# complete the tidy dataset
tidymeans <- cbind(factors, finaldf)
row.names(tidymeans) <- 1:180
DS_tidymeans <<- tidymeans
message("10. DATASET 2 CREATED:")
message("   'DS_tidymeans' dataset was created in the parent environment.")
message("   ")
message("***OPERATION COMPLETE***
2 datasets created:
'DS_all_meanstd'
'DS_tidymeans'")
}
run_analysis()
write.table(DS_tidymeans, "DS_tidymeans.csv")
write.table(DS_tidymeans, "DS_tidymeans.csv", sep = ",")
run_analysis <- function(directory = getwd()) {
setwd(directory)
# RETRIEVE DATASET
message("1/10. Retrieving raw dataset ...")
if(!dir.exists("UCI HAR Dataset")) {
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","Dataset.zip", mode="wb")
unzip("Dataset.zip")
} else {
message("   Message: dataset existed from a previous session, using existing dataset...")
}
# IMPORT TEST AND TRAIN FILES INTO R ENVIRONMENT
message("2/10. Importing files into R environment ... ")
# test files
testsubj <- read.table("./UCI HAR Dataset/test/subject_test.txt")
testset <- read.table("./UCI HAR Dataset/test/X_test.txt")
testlabels <- read.table("./UCI HAR Dataset/test/y_test.txt")
# train files
trainsubj <- read.table("./UCI HAR Dataset/train/subject_train.txt")
trainset <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainlabels <- read.table("./UCI HAR Dataset/train/y_train.txt")
# descriptions
labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
labels <- labels[, 2]
labels <- as.character(labels)
features <- read.table("./UCI HAR Dataset/features.txt")
features <- as.character(features[, 2])
# REQ5 : Appropriately label the data set with descriptive variable names
message("3/10. Labeling dataset with descriptive variable names ... ")
names(trainset)[1:length(features)] <- features
names(testset)[1:length(features)] <- features
# REQ2 : Extract mean and std. dev. measurements
message("4/10. Extracting mean and standard deviation measurements ... ")
meancol <- features[grep("Mean", features, ignore.case = T)]
stdcol <- features[grep("std", features, ignore.case = T)]
quedata <- c(meancol, stdcol)
testdata <- testset[, quedata]
traindata <- trainset[, quedata]
# REQ3 : Use descriptive activity names
message("5/10. Labeling activity names ... ")
trainact <- trainlabels
testact <- testlabels
qrep <- function(x, values) {
dfx <- as.data.frame(x)
charvals <- as.character(values)
for(i in 1:length(values)) {
matchvector <- which(dfx==i)
dfx[matchvector, ] <- charvals[i]
}
dfx
}
trainnames <- qrep(trainact, labels)
testnames <- qrep(testact, labels)
traindata$activity <- trainnames[, 1]
testdata$activity <- testnames[, 1]
# REQ1 : Merge the TRAINING and TEST sets
message("6/10. Merging TRAINING and TEST sets ... ")
traindata$subject <- trainsubj[, 1]
testdata$subject <- testsubj[, 1]
alldata <- rbind(traindata, testdata)
alldata <- alldata[, c(88, 87, 1:86)] #reorder for human reading
DS_all_meanstd <<- alldata
message("7/10. DATASET 1 CREATED:")
message("  'DS_all_meanstd' dataset was created in the parent environment.")
message("   ")
#REQ5 : create an independent data set with the average of each
#variable for each activity and each subject.
# calculate the requested averages
message("8/10. Spliting data by activity and subject ... ")
actsubj <- paste(alldata$subject, alldata$activity)
alldata$actsubj <- actsubj
alldata <- alldata[, c(89, 1:88)] # strip character columns
numdata <- alldata[, 4:89]
numlist <- split(numdata, actsubj)
message("9/10. Calculating means ... ")
meanlist <- lapply(numlist, colMeans)
finaldf <- do.call("rbind", meanlist)
finaldf <- as.data.frame(finaldf)
# return stripped character columns
factors <- alldata[as.numeric(rownames(unique(as.data.frame(actsubj)))), 2:3]
factors <- factors[order(unique(actsubj)), ]
# complete the tidy dataset
tidymeans <- cbind(factors, finaldf)
row.names(tidymeans) <- 1:180
DS_tidymeans <<- tidymeans
message("10/10. DATASET 2 CREATED:")
message("   'DS_tidymeans' dataset was created in the parent environment.")
message("   ")
message("***OPERATION COMPLETE***
2 datasets created:
'DS_all_meanstd'
'DS_tidymeans'")
}
run_analysis()
