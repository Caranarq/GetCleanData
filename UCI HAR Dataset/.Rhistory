list(set = set)
set = 1
list(set = set)
get = 2
list(set = set, get = get)
all = list(set = set, get = get)
all
rm(all)
rm(set)
rm(get)
rm(c(w, x, y))
rm(c("w", "x", "y"))
rm(list(c("w", "x", "y")))
rm(w)
rm(x)
rm(y)
rm(run)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
c(1, 2, 3)
num <- c(1, 2, 3)
class (num)
makeVector(num)
cachemean(num)
makeVector(num)
vector <- makeVector(1)
cachemean(vector)
vector <- makeVector(c(1:10))
cachemean(vector)
cachemean(vector)
?get
makeCacheMatrix <- function(x = matrix()) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setinv <- function(solve) cm <<- solve
getinv <- function() cm
list(set = set, get = get,
getinv = getinv,
setinv = setinv)
}
cacheSolve <- function(x, ...) {
cm <- x$getinv()
if(!is.null(cm)) {
message("Getting cached Data")
return(cm)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(cm)
cm
## Return a matrix that is the inverse of 'x'
}
sample <- makeCacheMatrix(m)
cachesolve(sample)
cachesolve(sample)
cacheSolve(sample)
cacheSolve(sample)
cachemean(vector)
solve(m)
rm(vector)
makeVector(num)
vector <- makeVector(num)
cachemean(vector)
cachemean(vector)
makeCacheMatrix(m)
matrix <- makeCacheMatrix(m)
class(m)
cacheSolve(matrix)
makeCacheMatrix$get
matrix$get
vector$get
vector$get
vector$getmean
cachemean(vector)
vector$get
rm(cam)
rm(cam1)
rm(cam2)
rm(matrix)
rm(vector)
rm(sample)
mv <- makevector
mv <- makevector()
mv <- makeVector()
rm(mv)
VV <- makeVector(num)
VV$get
cachemean(VV)
VV$get
a <- makeVector(c(5,1,3))
a$get
a$set(c(1, 2, 3)
)
A$get
a$get
View(m)
View(m)
rm(VV)
rm(a)
ls()
list(ls())
rm(list(ls()))
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- c(1:10)
v
vv <- makeVector(v)
class(vv)
vv
cachemean(vv)
cachemean(vv)
a <- makeVector(c(5,1,3))
a$get()
vv$get()
makeCacheMatrix <- function(x = matrix()) {
cm <- NULL
set <- function(y) {
x <<- y
cm <<- NULL
}
get <- function() x
setinv <- function(solve) cm <<- solve
getinv <- function() cm
list(set = set, get = get,
getinv = getinv,
setinv = setinv)
}
cacheSolve <- function(x, ...) {
cm <- x$getinv()
if(!is.null(cm)) {
message("Getting cached Data")
return(cm)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(cm)
cm
## Return a matrix that is the inverse of 'x'
}
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
mm <- makeCacheMatrix(m)
mm$get()
cacheSolve(mm)
solve(m)
mm$get()
mm$getinv()
cacheSolve <- function(x, ...) {
cm <- x$getinv()
if(!is.null(cm)) {
message("Getting cached Data")
return(cm)
}
data <- x$get()
cm <- solve(data, ...)
x$setinv(cm)
cm
## Return a matrix that is the inverse of 'x'
}
cacheSolve(mm)
cacheSolve(mm)
mm$get()
vv$getinv
cacheSolve(vv)
vv
rm(vv)
vv <- makeVector(v)
cachemean(vv)
cachemean(vv)
s <- c(9:15)
ss <- makeVector(s)
cachemean(ss)
cachemean(ss)
cachemean(vv)
makeCacheMatrix <- function(x = matrix()) {
cm <- NULL #When the matrix is stored the first time, assigns NULL value to "cm" (cm=CachedMatrix)
get <- function() x #get is a function to call the cachedMatrix
setinv <- function(solve) cm <<- solve #setinv assigns the inv. matrix calculated by cacheSolve to the special CachedMatrix
getinv <- function() cm
set <- function(y) { #Set function will be called only to change the "CachedMatrix"
x <<- y #To set a "NewMatrix", we call the function: ## CachedMatrix$set(NewMatrix) ##
cm <<- NULL #When the new matrix is assigned with set(), "cm" is redefined as NULL for cacheSolve to work again
}
list(set = set, get = get,
getinv = getinv,
setinv = setinv)
}
cacheSolve <- function(x, ...) {
cm <- x$getinv()
if(!is.null(cm)) {
message("Getting cached Data")
return(cm)
}
data <- x$get()
cm <- solve(data, ...)
x$setinv(cm)
cm
## Return a matrix that is the inverse of 'x'
}
rm(mm)
mm <- makeCacheMatrix(m)
cacheSolve(mm)
cacheSolve(mm)
rm(s)
rm(ss)
rm(v)
rm(vv)
rm(a)
mm
v <- c(1:10)
vv <- makeVector(v)
cachemean(vv)
vv
?require
require(stats); require(graphics)
min(5:1, pi)
pmin(5:1, pi)
min(5:1)
min(c(5, 3, 6, 7, 8))
x <- c(rnorm(10), runif(10), rnorm(10))
x
f <- gl(3,10)
f
tapply(x,f,mean)
q()
x[["A"]] <- 1:10
x <- list()
x[["A"]] <- 1:10
x[["B"]] <- 4:12
x
unlist(x)
q()
library(swirl)
rm(list=ls())
swirl()
num_vect <- as.numeric(c(0.5, 55, -10, 6))
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=
6
my_char(c("My", "name", "is"))
my_char <- (c("My", "name", "is"))
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,
"Carlos")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5,
NA)
3x
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3 ,5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:10)
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes()
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient",
"age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 !== 7
5 != 7
(5 == 7) == !TRUE
info()
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints)
any(ints <0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
getwd()
submit()
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
Try typing remainder(4, div = 2)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
?ellipses
submit()
telegram("Just a little more for the getting and cleaning data course")
submit()
submit()
submit()
submit()
mad_libs("protibulo", "meh", "chorrillo explosivo")
submit
submit()
I %p% love %p% R
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R"
I %p% "love" %p% R
"I"%p%"love"%p%"R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23] will do it.
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
lapply(flags, length)
sapply(flags, length)
sapply(flags, unique)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(unique_vals, function(elem) elem[2])
q()
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
exit()
head(flags)
quit
quit()
swirl()
library(swirl)
getwd()
setwd("F:/Shared/Learning/DataScience/03 Getting and clening Data/CapstoneProject")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", mode="wb")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","Dataset.zip", mode="wb")
?unzip
unzip("Dataset.zip")
dir()
cd("UCI HAR Dataset")
setwd("UCI HAR Dataset")
dir
dir()
install.packages('RTools')
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
